// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Model: https://www.prisma.io/docs/orm/reference/prisma-schema-reference#model-fields
// Field type scalar types: https://www.prisma.io/docs/orm/reference/prisma-schema-reference#model-field-scalar-types
// Field type modifiers: https://www.prisma.io/docs/orm/reference/prisma-schema-reference#model-field-type-modifiers
// Attributes: https://www.prisma.io/docs/orm/reference/prisma-schema-reference#attributes
// Attribute functions: https://www.prisma.io/docs/orm/reference/prisma-schema-reference#attribute-functions

model User {
  // Field name    Field type    Attributes
  id        Int      @id @default(autoincrement()) //@id คือ primary key
  createdAt DateTime @default(now()) //@default(now()) คือ ค่าที่จะถูกกำหนดเมื่อมีการสร้าง record ใหม่
  email     String   @unique // @unique คือ ค่าที่จะต้องไม่ซ้ำกันในฐานข้อมูล
  name      String? // ชื่อผู้ใช้สามารถเป็น null ได้
  role      Role     @default(USER) //role เป็น enum ที่กำหนดไว้ข้างล่าง สามารถเป็น USER หรือ ADMIN
  updatedAt DateTime @updatedAt // @updatedAt คือ ค่าที่จะถูกอัพเดตเมื่อมีการแก้ไข record

  successorId Int? @unique// ฟิลด์นี้ใช้สำหรับการเชื่อมโยงกับผู้ใช้คนอื่น ๆ (เช่น ผู้ใช้ที่เป็นผู้สืบทอด)
  successor   User? @relation("UserSuccessor", fields: [successorId], references: [id]) // ความสัมพันธ์แบบ one-to-one กับโมเดล User
  predecessor User? @relation("UserSuccessor") // ความสัมพันธ์แบบ one-to-one กับโมเดล User
  // ความสัมพันธ์กับโมเดลอื่น ๆ
  posts     Post[] //ความสัมพันธ์แบบ one-to-many กับโมเดล Post
  profile   Profile? //ความสัมพันธ์แบบ one-to-one กับโมเดล Profile
}

model Profile {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt // @updatedAt คือ ค่าที่จะถูกอัพเดตเมื่อมีการแก้ไข record
  bio       String?  @db.Text // @db.Text คือการกำหนดให้ฟิลด์ bio เป็นข้อความที่ยาวได้
  firstName String?  @db.VarChar(100) // @db.VarChar(100) คือการกำหนดความยาวสูงสุดของฟิลด์ firstName เป็น 100 ตัวอักษร
  lastName  String?  @db.VarChar(100) // @db.VarChar(100) คือการกำหนดความยาวสูงสุดของฟิลด์ lastName เป็น 100 ตัวอักษร
  age       Int? // อายุของผู้ใช้ สามารถเป็น null ได้
  // ความสัมพันธ์กับโมเดลอื่น ๆ
  user      User     @relation(fields: [userId], references: [id]) // ความสัมพันธ์แบบ one-to-one กับโมเดล User
  userId    Int      @unique

  @@unique([firstName, lastName]) // สร้างดัชนีที่ไม่ซ้ำกันสำหรับ firstName และ lastName
}

model Post {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt // @updatedAt คือ ค่าที่จะถูกอัพเดตเมื่อมีการแก้ไข record
  published Boolean  @default(false) // @default(false) คือ ค่าที่จะถูกกำหนดเมื่อมีการสร้าง record ใหม่
  title     String   @db.VarChar(255) // @db.VarChar(255) คือการกำหนดความยาวสูงสุดของฟิลด์ title เป็น 255 ตัวอักษร
  content   String?  @db.Text // @db.Text คือการกำหนดให้ฟิลด์ content เป็นข้อความที่ยาวได้

  author   User? @relation(fields: [authorId], references: [id]) // ความสัมพันธ์แบบ many-to-one กับโมเดล User
  authorId Int?
  category Cagegory[] // ความสัมพันธ์แบบ many-to-many กับโมเดล Cagegory

  @@index([title]) // สร้างดัชนีสำหรับฟิลด์ title เพื่อเพิ่มประสิทธิภาพการค้นหา
}

model Cagegory {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt // @updatedAt คือ ค่าที่จะถูกอัพเดตเมื่อมีการแก้ไข record
  name      String   @db.VarChar(100) // @db.VarChar(100) คือการกำหนดความยาวสูงสุดของฟิลด์ name เป็น 100 ตัวอักษร

  posts     Post[] // ความสัมพันธ์แบบ many-to-many กับโมเดล Post
  @@index([name]) // สร้างดัชนีสำหรับฟิลด์ name เพื่อเพิ่มประสิทธิภาพการค้นหา
}

/////// Explicit กำหนดและสร้างตารางเพื่อกำหนด Relation เอง ///////
/* 
model Post {
  id         Int                 @id @default(autoincrement())
  title      String
  categories CategoriesOnPosts[]
}

model Category {
  id    Int                 @id @default(autoincrement())
  name  String
  posts CategoriesOnPosts[]
}

model CategoriesOnPosts {
  post       Post     @relation(fields: [postId], references: [id])
  postId     Int // relation scalar field (used in the `@relation` attribute above)
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId Int // relation scalar field (used in the `@relation` attribute above)
  assignedAt DateTime @default(now())
  assignedBy String

  @@id([postId, categoryId])
} */

// Enum: https://www.prisma.io/docs/orm/reference/prisma-schema-reference#enum
enum Role {
  USER
  ADMIN
}

// Type (MongoDB only): https://www.prisma.io/docs/orm/reference/prisma-schema-reference#type
